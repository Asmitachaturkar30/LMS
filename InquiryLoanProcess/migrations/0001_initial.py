# Generated by Django 5.1.9 on 2025-05-26 07:42

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ApprovalInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ApprovedAmount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('ApprovalStatus', models.CharField(choices=[('Approved', 'Approved'), ('Rejected', 'Rejected'), ('Hold', 'Hold')], default='Hold', max_length=10)),
                ('ApprovalRemarks', models.TextField(blank=True, null=True)),
                ('CreateBy', models.CharField(blank=True, max_length=50, null=True)),
                ('UpdateBy', models.CharField(blank=True, max_length=50, null=True)),
                ('CreatedAt', models.DateTimeField(auto_now_add=True)),
                ('LastUpdatedAt', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'ApprovalInfo',
            },
        ),
        migrations.CreateModel(
            name='DisbursementInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('DisbursementType', models.CharField(choices=[('Full', 'Full'), ('Partial', 'Partial')], default='Full', max_length=20)),
                ('DisbursementMode', models.CharField(choices=[('NEFT', 'NEFT'), ('Cheque', 'Cheque'), ('UPI', 'UPI')], max_length=50)),
                ('DisbursementDate', models.DateTimeField()),
                ('DisbursementStatus', models.CharField(choices=[('Pending', 'Pending'), ('Completed', 'Completed'), ('Failed', 'Failed')], default='Pending', max_length=20)),
                ('Notes', models.TextField(blank=True, null=True)),
                ('CreateBy', models.CharField(max_length=50)),
                ('UpdateBy', models.CharField(max_length=50)),
                ('CreatedAt', models.DateTimeField(auto_now_add=True)),
                ('LastUpdatedAt', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'DisbursementInfo',
            },
        ),
        migrations.CreateModel(
            name='EMISetup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('EMI_Amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('StartDate', models.DateField()),
                ('TotalTenure', models.IntegerField()),
                ('RemainingEMIS', models.IntegerField()),
                ('PaidEMIS', models.IntegerField()),
                ('AutoDebitEnabled', models.BooleanField(default=False)),
                ('CreateBy', models.CharField(max_length=50)),
                ('UpdateBy', models.CharField(max_length=50)),
                ('CreatedAt', models.DateTimeField(auto_now_add=True)),
                ('LastUpdatedAt', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'EMISetup',
            },
        ),
        migrations.CreateModel(
            name='Foreclosure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Requested', models.BooleanField(default=False)),
                ('Penalty', models.DecimalField(decimal_places=2, max_digits=12)),
                ('Status', models.CharField(max_length=30)),
                ('CreateBy', models.CharField(max_length=50)),
                ('UpdateBy', models.CharField(max_length=50)),
                ('CreatedAt', models.DateTimeField(auto_now_add=True)),
                ('LastUpdatedAt', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'Foreclosure',
            },
        ),
        migrations.CreateModel(
            name='Full_KYC',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('PANCard', models.FileField(upload_to='kyc_docs/pan/')),
                ('AadhaarCard', models.FileField(upload_to='kyc_docs/aadhaar/')),
                ('SalarySlips', models.FileField(blank=True, help_text='Required if salaried', null=True, upload_to='kyc_docs/salary_slips/')),
                ('BankStatement', models.FileField(upload_to='kyc_docs/bank_statements/')),
                ('ItrDocs', models.FileField(blank=True, help_text='Required if self-employed', null=True, upload_to='kyc_docs/itr/')),
                ('OtherIncomeProof', models.FileField(blank=True, null=True, upload_to='kyc_docs/other_income/')),
                ('PANStatus', models.BooleanField(default=False, help_text='Result of PAN API call')),
                ('AadhaarStatus', models.BooleanField(default=False, help_text='Result of Aadhaar API call')),
                ('KYCStatus', models.CharField(choices=[('Pending', 'Pending'), ('Verified', 'Verified'), ('Rejected', 'Rejected')], default='Pending', max_length=10)),
                ('CreateBy', models.CharField(max_length=50)),
                ('UpdateBy', models.CharField(max_length=50)),
                ('Created_at', models.DateTimeField(auto_now_add=True)),
                ('Updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'Full_KYC',
            },
        ),
        migrations.CreateModel(
            name='LoanApplication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Employment_Type', models.CharField(choices=[('Salaried', 'Salaried'), ('Self-employed', 'Self-employed')], max_length=50, verbose_name='Employment Type')),
                ('Occupation', models.CharField(max_length=100, verbose_name='Occupation')),
                ('Company_Name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Company Name')),
                ('Industry_Type', models.CharField(blank=True, max_length=50, verbose_name='Industry Type')),
                ('Work_Experience', models.PositiveIntegerField(blank=True, null=True, verbose_name='Work Experience')),
                ('Employer_Duration', models.PositiveIntegerField(blank=True, null=True, verbose_name='Employer Duration')),
                ('Office_Address', models.CharField(blank=True, max_length=255, null=True, verbose_name='Office Address')),
                ('Office_Phone_Number', models.CharField(blank=True, max_length=15, null=True, validators=[django.core.validators.RegexValidator('^\\d{10}$', message='Enter a valid 10 digit phone number')], verbose_name='Office Phone Number')),
                ('Monthly_Income', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Monthly Income')),
                ('Annual_Income', models.DecimalField(blank=True, decimal_places=2, editable=False, help_text='Auto-calculated as 12 x Monthly Income', max_digits=12, null=True, verbose_name='Annual Income')),
                ('Bank_Name', models.CharField(max_length=100, verbose_name='Bank Name')),
                ('Branch_Name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Branch Name')),
                ('Account_Number', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator('^\\d+$', message='Account number must be numeric')], verbose_name='Account Number')),
                ('IFSC_Code', models.CharField(max_length=11, validators=[django.core.validators.RegexValidator('^[A-Z]{4}0[A-Z0-9]{6}$', message='Invalid IFSC Code format')], verbose_name='IFSC Code')),
                ('Account_Type', models.CharField(choices=[('Saving', 'Saving'), ('Current', 'Current')], max_length=7, verbose_name='Account Type')),
                ('Loan_Tenure', models.PositiveIntegerField(verbose_name='Loan Tenure')),
                ('Repayment_Mode', models.CharField(choices=[('ECS', 'ECS'), ('Online', 'Online'), ('Cash', 'Cash')], max_length=50, verbose_name='Repayment Mode')),
                ('Co_Applicant', models.BooleanField(blank=True, default=False, verbose_name='Co-Applicant')),
                ('Guarantor_Required', models.BooleanField(blank=True, default=False, verbose_name='Guarantor Required')),
                ('Guarantor_Name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Guarantor Name')),
                ('Guarantor_Mobile', models.CharField(blank=True, max_length=15, null=True, validators=[django.core.validators.RegexValidator('^\\d{10}$', message='Enter a valid 10 digit phone number')], verbose_name='Guarantor Mobile')),
                ('Guarantor_Email', models.EmailField(blank=True, max_length=100, null=True, verbose_name='Guarantor Email')),
                ('Guarantor_Address', models.CharField(blank=True, max_length=255, null=True, verbose_name='Guarantor Address')),
                ('Guarantor_PAN_Number', models.CharField(blank=True, max_length=10, null=True, validators=[django.core.validators.RegexValidator('^[A-Z]{5}[0-9]{4}[A-Z]$', message='Invalid PAN format')], verbose_name='Guarantor PAN Number')),
                ('Guarantor_Aadhaar_Number', models.CharField(blank=True, max_length=12, null=True, validators=[django.core.validators.RegexValidator('^\\d{12}$', message='Aadhaar must be 12 digits')], verbose_name='Guarantor Aadhaar Number')),
                ('Guarantor_PAN_Card_Copy', models.FileField(blank=True, null=True, upload_to='guarantor_docs/pan/', verbose_name='Guarantor PAN Card Copy')),
                ('Guarantor_Aadhaar_Card_Copy', models.FileField(blank=True, null=True, upload_to='guarantor_docs/aadhaar/', verbose_name='Guarantor Aadhaar Card Copy')),
                ('Guarantor_Bank_Statement', models.FileField(blank=True, null=True, upload_to='guarantor_docs/bank_statement/', verbose_name='Guarantor Bank Statement')),
                ('Existing_Loans', models.BooleanField(blank=True, default=False, verbose_name='Existing Loans')),
                ('EMI_Amount_Existing', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='EMI Amount (Existing)')),
            ],
            options={
                'db_table': 'LoanApplication',
            },
        ),
        migrations.CreateModel(
            name='NewInquiry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Date', models.DateField(verbose_name='Date')),
                ('First_Name', models.CharField(max_length=50, validators=[django.core.validators.RegexValidator('^[a-zA-Z]+$', message='Only alphabets allowed')], verbose_name='First Name')),
                ('Middle_Name', models.CharField(blank=True, max_length=50, null=True, verbose_name='Middle Name')),
                ('Last_Name', models.CharField(max_length=50, verbose_name='Last Name')),
                ('Gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other')], max_length=6, verbose_name='Gender')),
                ('Marital_Status', models.CharField(blank=True, max_length=30, verbose_name='Marital Status')),
                ('Date_of_Birth', models.DateField(verbose_name='Date of Birth')),
                ('Phone_Number', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator('^\\d{10}$', message='Enter a valid 10 digit phone number')], verbose_name='Phone Number')),
                ('Alternate_Phone_Number', models.CharField(blank=True, max_length=15, null=True, validators=[django.core.validators.RegexValidator('^\\d{10}$', message='Enter a valid 10 digit phone number')], verbose_name='Alternate Phone Number')),
                ('Email_Address', models.EmailField(max_length=100, verbose_name='Email Address')),
                ('Fathers_Mothers_Name', models.CharField(max_length=100, verbose_name="Father's/Mother's Name")),
                ('PAN_Number', models.CharField(max_length=10, validators=[django.core.validators.RegexValidator('^[A-Z]{5}[0-9]{4}[A-Z]$', message='Invalid PAN format')], verbose_name='PAN Number')),
                ('Aadhaar_Number', models.CharField(max_length=12, unique=True, validators=[django.core.validators.RegexValidator('^\\d{12}$', message='Aadhaar must be 12 digits')], verbose_name='Aadhaar Number')),
                ('Address_Line_1', models.CharField(max_length=255, verbose_name='Address Line 1')),
                ('Address_Line_2', models.CharField(blank=True, max_length=255, null=True, verbose_name='Address Line 2')),
                ('City', models.CharField(max_length=100, verbose_name='City')),
                ('State', models.CharField(max_length=100, verbose_name='State')),
                ('Pincode', models.CharField(max_length=6, validators=[django.core.validators.RegexValidator('^\\d{6}$', message='Pincode must be 6 digits')], verbose_name='Pincode')),
                ('Country', models.CharField(default='India', max_length=50, verbose_name='Country')),
                ('Landmark', models.CharField(blank=True, max_length=255, null=True, verbose_name='Landmark')),
                ('Address_Type', models.CharField(blank=True, max_length=50, verbose_name='Address Type')),
                ('Duration_at_Address', models.PositiveIntegerField(blank=True, null=True, verbose_name='Duration at Address')),
                ('Loan_Purpose', models.CharField(max_length=100, verbose_name='Loan Purpose')),
                ('Loan_Amount_Requested', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(1000.0)], verbose_name='Loan Amount Requested')),
                ('Source', models.CharField(blank=True, max_length=50, verbose_name='Source')),
                ('Follow_up_Notes', models.TextField(blank=True, null=True, verbose_name='Follow-up Notes')),
                ('Inquiry_Status', models.CharField(choices=[('Open', 'Open'), ('Converted', 'Converted'), ('Dropped', 'Dropped')], default='Open', max_length=9, verbose_name='Inquiry Status')),
            ],
            options={
                'db_table': 'NewInquiry',
            },
        ),
        migrations.CreateModel(
            name='Penalty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('BouncedCharges', models.DecimalField(decimal_places=2, max_digits=12)),
                ('LatePaymentPenalty', models.DecimalField(decimal_places=2, max_digits=12)),
                ('PenaltyStatus', models.CharField(choices=[('Unpaid', 'Unpaid'), ('Paid', 'Paid')], default='Unpaid', max_length=20)),
                ('CreateBy', models.CharField(max_length=50)),
                ('UpdateBy', models.CharField(max_length=50)),
                ('CreatedAt', models.DateTimeField(auto_now_add=True)),
                ('LastUpdatedAt', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'Penalty',
            },
        ),
    ]
